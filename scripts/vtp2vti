#!/usr/bin/python

from math import copysign
from numpy import array, zeros, arange, float, abs, argmax, all, ndenumerate,round
from mtk.geometry.vol import BasicVolume
from mtk.geometry.iter import face, line
from mtk.geometry.planecut import cutfaces
from mtk.io.vtk_ff import read_pol, write_vol
from mtk.log import log
import sys, os
import bisect as bs

_usage_ = """
Transcript poligon to a volumetric quad grid of shape size.

vtp2vti [vtp input filename] [vti output filename] [shape size]
"""

def put_face(F, vertexs, vol, value):
    """
    """
    coords = [vol.t(vertexs[vertex]) for vertex in F]

    for o in face(coords):
        vol._data[tuple(array(o, dtype=int))] = value

def find_le(a, x):
    'Find leftmost value greater than x'
    i = bs.bisect_right(a, x)
    if i != len(a):
        return i-1
    raise ValueError

def find_gt(a, x):
    i = bs.bisect_right(a, x)
    if i != len(a):
        return i
    raise ValueError

def transcript(faces, vertexs, vol, value, normal = (1,0,0)):
    di = normal.index(1)
    normal = array(normal)
    planes  = [ (x * normal + vol.min * (1 - normal))
               for x in arange(vol.min[di], vol.max[di], vol.delta[di]) ]
    splanes = [ x[di] for x in planes ]


    t = float(len(faces))
    c = 0
    for face in faces:
        # Print progress
        print "% 5.1f%%\r" % (((c/t)*100)),
        sys.stdout.flush()
        c = c + 1

        vface = map(lambda i: vertexs[i], face)
        vlist = [ v[di] for v in vface ]
        vlist.sort()
        b_idx = find_le(splanes, vlist[0])
        e_idx = find_gt(splanes, vlist[-1])
        for plane in planes[b_idx:e_idx]:
            # Draw lines
            lines = cutfaces((plane, normal), [face, ], vertexs)
            for l in lines:
                for o in line(*map(vol.t, l)):
                    i = tuple(array(round(array(o)), dtype=int))
                    vol._data[i] = value

def vtp2vti(vtpfilename, vtifilename, shapesize):
    log.info("Loading polygon file")
    P, S = read_pol(vtpfilename)
    vertexs, faces = P.v, P.f
    log.info("Creating grid")
    mincoord = array(map(min, [vertexs[:,0], vertexs[:,1], vertexs[:,2]]))
    maxcoord = array(map(max, [vertexs[:,0], vertexs[:,1], vertexs[:,2]]))
    difcoord = maxcoord - mincoord
    expshape = array([shapesize, shapesize, shapesize])
    delta = difcoord / expshape
    vol = BasicVolume(mincoord-(delta*2), delta, zeros(expshape+6))
    log.info("Transcripting Surface")
    log.info("Step 1/3")
    transcript(faces, vertexs, vol, 1, normal=(1,0,0))
    log.info("Step 2/3")
    transcript(faces, vertexs, vol, 1, normal=(0,1,0))
    log.info("Step 3/3")
    transcript(faces, vertexs, vol, 1, normal=(0,0,1))
    log.info("Storing")
    write_vol(vol, vtifilename)

if __name__ == "__main__":
    if len(sys.argv) == 0:
        print _usage_
        exit(-1)
    try:
        vtp_in_filename = sys.argv[1]
        vti_out_filename = sys.argv[2]
        shape_size = int(sys.argv[3])
    except:
        print "ERROR: Invalid parameters"
        print _usage_
        log.error("Shell command '%s'" % ' '.join(sys.argv))
        exit(-1)

    log.info("Starting transcription from poligon to volumetric grid")
    log.info("Shell command '%s'" % ' '.join(sys.argv))
    log.info("Work path '%s'" % os.getcwd())

    vtp2vti(vtp_in_filename, vti_out_filename, shape_size)

    log.info("Stop transcription from poligon to volumetric grid")

