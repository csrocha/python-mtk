#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# $Id$
#
#  Copyright (C) 2009   Cristian S. Rocha (crocha@dc.uba.ar)
#  Licensed to PSF under a Contributor Agreement.
__usage__ = """
  dx2npy [file.dx] [file.npy:file.dat]

  Convierte archivos .dx (APMS) a archivos NPY de numpy.
"""
import re
from numpy import save

def read_dx(istream):
    realnum_re = r"([-+]?[0-9]+[.]?[0-9]*(?:[eE][-+]?[0-9]+)?)"
    comment_re = re.compile(r"#.*")
    shape_re = re.compile(r"^object\s+(\d+)\s+class\s+gridpositions\s+counts\s+(\d+)\s+(\d+)\s+(\d+)\s*$")
    object_re = re.compile(r"^object\s+([^\s]+\s*)*$")
    origin_re = re.compile(r"^origin\s+%s\s+%s\s+%s.*$" % (realnum_re, realnum_re, realnum_re))
    delta_re = re.compile(r"^delta\s+%s\s+%s\s+%s.*$" % (realnum_re, realnum_re, realnum_re))
    numbers_re = re.compile(r"^%s(?:\s+%s)?(?:\s%s)?.*$" % (realnum_re, realnum_re, realnum_re))

    array = []
    deltas = []
    origin = None
    line = 0
    for l in istream:
        #import pdb; pdb.set_trace()
        l = comment_re.sub('', l) # Remove comments
        m = shape_re.match(l)
        if m != None:
            # Reading object
            shape = map(int, m.groups()[1:])
            continue
        m = object_re.match(l)
        if m != None:
            # Reading object
            continue
        m = origin_re.match(l)
        if m != None:
            # Reading origin
            origin = map(float, m.groups())
            continue
        m = delta_re.match(l)
        if m != None:
            # Reading delta
            delta = map(float, m.groups())
            deltas.append(delta)
            continue
        m = numbers_re.match(l)
        if m != None:
            # Reading origin
            try:
                array += map(float, filter(lambda x: x != None, m.groups()))
            except TypeError:
                raise RuntimeError("ERROR:%i:%s\n" % (line, l))
            continue
        line = line + 1
    return shape, origin, deltas, array

if __name__ == "__main__":
    from sys import argv, exit
    from numpy import array, dot
    import pickle

    if len(argv) != 4:
        print "Usage:"
        print "dx2npy [dx file] [npy file] [metadata file]"
        exit(0)

    istream = open(argv[1])
    shape, origin, deltas, A = read_dx(istream)
    matrix = array(A).reshape(shape)
    save(open(argv[2],'w'), matrix)

    MD = { 'max': origin + shape*dot(array([1.0,1.0,1.0]),array(deltas, dtype=float)),
            'min': origin,
            'res': deltas[0][0],
            'deltas': dot(array([1.0,1.0,1.0]),array(deltas, dtype=float)),
            'deltas3D': deltas,
            }
    print MD

    pickle.dump(MD, open(argv[3],'w'))

