#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# $Id: drawmol.py 93 2009-06-15 14:06:18Z cristian_docking $
#
#  Copyright (C) 2009   Cristian S. Rocha (crocha@dc.uba.ar)
#  Licensed to PSF under a Contributor Agreement.
_usage_ =\
"""
dock volume matrix of a molecule

Usage:
    dock <npy file>:<dat file> <npy file>:<dat file> <prefix>

"""
import sys
import os.path
import pickle
import getopt
from time import time
from sys import stderr
import numpy

try:
    import mtk
except ImportError:
    print "WARNING: MTK is not installed. Looking for package dir."
    if os.path.exists("build/lib/mtk"):
        print "Found in build/lib"
        sys.path.append("build/lib")
    elif os.path.exists("mtk"):
        print "Found in work dir"
        sys.path.append(".")
    import mtk

from mtk.signal import rxcorr
from mtk.geometry.vol import Volume
from mtk.geometry.transformation import rotation, translation, genRotations
from numpy import radians, dot, array, zeros

def load_volume(filenames):
    filenames = filenames.split(':')
    npy_filenames = filenames[:-1]
    metadata = pickle.load(open(filenames[-1]))

    A = [ Volume(metadata['min'],
                 metadata['max'],
                 metadata['res'],
                 def_array = numpy.load(filename))
         for filename in npy_filenames ]

    return A

print sys.argv

A = load_volume(sys.argv[1])
B = load_volume(sys.argv[2])
prefix = sys.argv[3]

print "Tamaño ligando:", A[0].shape
print "Tamaño receptor:", B[0].shape

max_shape = map(max, list(zip(A[0].shape, B[0].shape)))
min_shape = map(min, list(zip(A[0].shape, B[0].shape)))
shape = tuple(array(max_shape) + array(min_shape))

print "Tamaño final: ", shape

L = zeros(shape, A[0].dtype)
R = zeros(shape, B[0].dtype)

half = array(array(A[0].shape)/2.0, int)
shalf = array(A[0].shape) - array(half)

L[-half[0]:,-half[1]:,-half[2]:] = A[0].A[:half[0],:half[1],:half[2]]
L[-half[0]:,-half[1]:,:half[2]]  = A[0].A[:half[0],:half[1],shalf[2]:]
L[-half[0]:,:half[1],-half[2]:]  = A[0].A[:half[0],shalf[1]:,:half[2]]
L[-half[0]:,:half[1],:half[2]]   = A[0].A[:half[0],shalf[1]:,shalf[2]:]
L[:half[0],-half[1]:,-half[2]:]  = A[0].A[shalf[0]:,:half[1],:half[2]]
L[:half[0],-half[1]:,:half[2]]   = A[0].A[shalf[0]:,:half[1],shalf[2]:]
L[:half[0],:half[1],-half[2]:]   = A[0].A[shalf[0]:,shalf[1]:,:half[2]]
L[:half[0],:half[1],:half[2]]    = A[0].A[shalf[0]:,shalf[1]:,shalf[2]:]

min = (array(shape) - array(B[0].shape))/2.0
max = min + array(B[0].shape)

R[min[0]:max[0],min[1]:max[1],min[2]:max[2]] = B[0].A

T = rxcorr(L, R)
print T.flat[T.argmax()]
print T.argmax()
print T.argmin()

numpy.save("%s.L.npy" % prefix, L)
numpy.save("%s.R.npy" % prefix, R)
numpy.save("%s.npy" % prefix, T)

