#!/usr/bin/python

from mtk.geometry.vol import load as load_vol
from mtk.geometry.iter import line
from numpy import ndenumerate, array, round, int
from operator import itemgetter, attrgetter
from mtk.log import log
import sys, os

def appendcoord(d, x):
    if not x[0] in d:
        d[x[0]] = {}
    if not x[1] in d[x[0]]:
        d[x[0]][x[1]] = {}
    d[x[0]][x[1]][x[2]] = 1
    return d

def existcoord(d, x):
    return x[0] in d and \
       x[1] in d[x[0]] and \
       x[2] in d[x[0]][x[1]]

def dictcoordlist(xs):
    d = {}
    for i in xs:
        d = appendcoord(d, i)
    return d

def clean(l):
    n = []
    d = dictcoordlist(l)
    for i in d.keys():
        for j in d[i].keys():
            for k in d[i][j].keys():
                n.append((i,j,k))
    return n

def filling(vol, o, value):
    i = tuple(array(round(vol.t(o)), dtype=int))
    tofill = [ i ]
    k = 0
    fillidx = { }
    c = 0
    while len(tofill) > 0 and c < 1000000:
        x = array(tofill.pop(0))
        new = [x + ( 0, 0,-1),
             x + ( 0, 0, 1),
             x + ( 0,-1, 0),
             x + ( 0, 1, 0),
             x + (-1, 0, 0),
             x + ( 1, 0, 0)]
        new = [ n for n in new if vol._data[tuple(n)] != value ]
        d = dictcoordlist(tofill[:10])
        new = [ tuple(x) for x in new if not existcoord(d, x) ]
        tofill += new
        vol._data[tuple(x)] = value
        c = c + 1
    return vol

def fill(vol, value):
    state = 0
    change = 0
    for i, v in ndenumerate(vol._data):
        if i[-1] == 0:
            state = 0
	if state == 0 and v != value:
            state = 0
	elif state == 0 and v == value:
            state = 1
	elif state == 1 and v != value:
            state = 2
            start = i
	elif state == 1 and v == value:
            state = 1
	elif state == 2 and v != value:
            state = 2
	elif state == 2 and v == value:
            # Draw Line!
            for o in line(start, i):
                vol._data[tuple(o)] = value
            state = 3
            change = 1
	elif state == 3 and v != value:
            state = 0
	elif state == 3 and v == value:
            state = 3
    if change == 0:
        log.warn("Made no changes.")
    return vol

def fillvol(vti_in_filename, vti_out_filename, value):
    vol = load_vol(vti_in_filename)
    log.info("Filling")
    vol = filling(vol, vol.center, value)
    log.info("Storing")
    vol.dump(vti_out_filename)

if __name__ == "__main__":
    if len(sys.argv) == 0:
        print _usage_
        exit(-1)
    try:
        vti_in_filename = sys.argv[1]
        vto_out_filename = sys.argv[2]
        value = float(sys.argv[3])
    except:
        print "ERROR: Invalid parameters"
        print _usage_
        log.error("Shell command '%s'" % ' '.join(sys.argv))
        exit(-1)

    log.info("Starting filling the volumetric grid")
    log.info("Shell command '%s'" % ' '.join(sys.argv))
    log.info("Work path '%s'" % os.getcwd())

    fillvol(vti_in_filename, vto_out_filename, value)

    log.info("Stop filling the volumetric grid")

